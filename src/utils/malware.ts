import NodeClam from 'clamscan';
import fs from 'fs/promises';
import path from 'path';
import { exec } from 'child_process';
import { set } from 'zod';

/**
 * This module provides functionality for scanning files for malware
 * using ClamAV antivirus and managing virus database updates
 */

// Initialize ClamAV scanner with configuration
const clamscan = new NodeClam().init({
    clamdscan: {
        path: '/usr/bin/clamdscan',
        configFile: '/etc/clamav/clamd.conf',
        socket: false,
    },
    preference: 'clamdscan',
    removeInfected: false,
    quarantineInfected: false,
    scanRecursively: false,
});


/**
 * Scans a buffer for malware using ClamAV
 * @param buffer The buffer to scan
 * @returns Array of virus names found, or empty array if clean
 */
export async function scanBufferForMalware(buffer: Buffer): Promise<string[]> {
    try {
        const randomId = Math.random().toString(36).substring(7);
        const filepath = path.join('/tmp', `scanfile-${randomId}`);
        await fs.writeFile(filepath, buffer);
        const isInfected = await (await clamscan).isInfected(filepath);
        await fs.unlink(filepath);
        return isInfected.isInfected
            ? isInfected.viruses.length === 0 ? [
                'Virus detected, but no further information available.',
            ] : isInfected.viruses
            : [];
    } catch (error) {
        console.error('Error while scanning file for malware:', error);
        return ['Error while scanning file for malware.'];
    }
}

/**
 * Updates the ClamAV virus definitions database
 * @returns Promise that resolves when the update is complete
 */
function triggerClamAVUpdate(): Promise<void> {
    console.log('Updating ClamAV database...');
    return new Promise((resolve, reject) => {
        exec('freshclam', (error, stdout, stderr) => {
            if (error) {
                console.error(`Error updating ClamAV: ${error.message}`);
                return reject(error);
            }
            if (stderr) {
                console.error(`Stderr: ${stderr}`);
            }
            console.log(`Update successful: ${stdout}`);
            resolve();
        });
    });
}

// Update virus definitions on startup and then every 24 hours
triggerClamAVUpdate().then(() => {
    setInterval(async () => {
        await triggerClamAVUpdate();
    }, 1000 * 60 * 60 * 24); // 24 hours
});
